[{"D:\\calender\\src\\index.js":"1","D:\\calender\\src\\App.js":"2","D:\\calender\\src\\reportWebVitals.js":"3","D:\\calender\\src\\utills\\handleSetCalenderData.js":"4","D:\\calender\\src\\Form\\form.js":"5","D:\\calender\\src\\API\\axios.js":"6"},{"size":500,"mtime":499162500000,"results":"7","hashOfConfig":"8"},{"size":2881,"mtime":1609610445313,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"8"},{"size":1942,"mtime":1609610185202,"results":"11","hashOfConfig":"8"},{"size":1647,"mtime":1609610154046,"results":"12","hashOfConfig":"8"},{"size":656,"mtime":1609610155793,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1gwxvhv",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"D:\\calender\\src\\index.js",[],["29","30"],"D:\\calender\\src\\App.js",[],"D:\\calender\\src\\reportWebVitals.js",[],"D:\\calender\\src\\utills\\handleSetCalenderData.js",["31"],"import API from \"../API/axios\";\r\nimport \"../App.css\";\r\n\r\nexport const handleSetCalenderData = async (year, month, handleToggle) => {\r\n  // fetch data by using year and month\r\n  try {\r\n    const getDataByYeatAndMonth = await API(`/timing/${year}/${month}`);\r\n\r\n    // if month did not have any session then do nothing\r\n    if (!getDataByYeatAndMonth.status) return false;\r\n\r\n    const datesSession = getDataByYeatAndMonth.timing.dates;\r\n\r\n    // arrange dates session into proper formate\r\n    const newData = datesSession.map((item) => {\r\n      const day = item.date;\r\n      let arrangeNewData = [];\r\n      item.data.map((item) => {\r\n        // convert hour and min from 10:AM/PM to 24 formate\r\n        var hrs = Number(item.time.match(/^(\\d+)/)[1]);\r\n        var mnts = Number(item.time.match(/:(\\d+)/)[1]);\r\n        var format = item.time.match(/\\s(.*)$/)[1];\r\n        if (format === \"PM\" && hrs < 12) hrs = hrs + 12;\r\n        if (format === \"AM\" && hrs === 12) hrs = hrs - 12;\r\n        var hours = hrs.toString();\r\n        var minutes = mnts.toString();\r\n        if (hrs < 10) hours = \"0\" + hours;\r\n        if (mnts < 10) minutes = \"0\" + minutes;\r\n\r\n        let StartTime = new Date(year, month - 1, day, hours, minutes);\r\n        let EndTime = new Date(StartTime);\r\n        EndTime.setMinutes(StartTime.getMinutes() + parseInt(item.duration));\r\n\r\n        arrangeNewData = [\r\n          ...arrangeNewData,\r\n          {\r\n            ...item,\r\n            Subject: item.session_name,\r\n            StartTime,\r\n            EndTime,\r\n            Description:`<button class=\"register_user\" onClick=\"${handleToggle}\" > Register </button>`,\r\n            time: `${day}-${month}-${year}`,\r\n          },\r\n        ];\r\n      });\r\n      return arrangeNewData;\r\n    });\r\n\r\n    // merge dates because it containe array inside arrsay\r\n    const mergeData = [].concat.apply([], newData);\r\n\r\n    return mergeData;\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n};\r\n","D:\\calender\\src\\Form\\form.js",[],"D:\\calender\\src\\API\\axios.js",[],["32","33"],{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":18,"column":28,"nodeType":"40","messageId":"41","endLine":18,"endColumn":30},{"ruleId":"34","replacedBy":"42"},{"ruleId":"36","replacedBy":"43"},"no-native-reassign",["44"],"no-negated-in-lhs",["45"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",["44"],["45"],"no-global-assign","no-unsafe-negation"]